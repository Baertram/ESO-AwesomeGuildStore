import groovy.swing.SwingBuilder
import java.awt.FlowLayout
import org.apache.tools.ant.filters.ReplaceTokens

def loadProperties(fileName) {
    def propFile = file(fileName)
    def props = new Properties()
    if(propFile.exists()) {
        props.load(new FileReader(propFile))
    }
    return props
}

def saveProperties(fileName, props, comment) {
    def writer = new FileWriter(file(fileName))
    try {
        props.store(writer, comment)
        writer.flush()
    } finally {
        writer.close()
    }
}

def getBuildNumber(fileName) {
    def buildNumber = loadProperties(fileName)
    if(!buildNumber.value) {
        buildNumber.value = 0
    }
    return buildNumber.value.toInteger()
}

def incrementBuildNumber(fileName) {
    def buildNumber = loadProperties(fileName)
    if(!buildNumber.value) {
        buildNumber.value = 1
    } else {
        buildNumber.value = buildNumber.value.toInteger() + 1
    }
    buildNumber.value = buildNumber.value.toString()
    saveProperties(fileName, buildNumber, "Automatically generated file. Do not edit")
}

def createConfigDialog() {
    def versionParts = []
    versionParts << 0
    versionParts << getBuildNumber("build/build.number")
    def nextVersion = versionParts.join(".")
    new SwingBuilder().edt {
        dialog(
                        modal: true,
                        title: 'Select version number',
                        alwaysOnTop: true,
                        resizable: false,
                        locationRelativeTo: null,
                        size: [200, 160],
                        show: true
                        ) {
                            lookAndFeel("system")
                            panel(layout:new FlowLayout(FlowLayout.LEFT)) {
                                textField(
                                                id: 'versionInput',
                                                text: nextVersion,
                                                columns: 10)

                                label(text: 'increment build number:')

                                panel(layout:new FlowLayout()) {
                                    doSave = buttonGroup()
                                    radioButton(text:"yes", actionCommand: "yes", buttonGroup:doSave, selected: true)
                                    radioButton(text:"no", actionCommand: "no", buttonGroup:doSave)
                                }

                                panel(layout:new FlowLayout()) {
                                    button('OK',preferredSize:[80, 24], actionPerformed: {
                                        ext.targetVersion = versionInput.text
                                        if(doSave.selection.actionCommand == "yes") {
                                            incrementBuildNumber("build/build.number")
                                        }
                                        dispose()
                                    }, )
                                    button('Cancel',preferredSize:[80, 24], actionPerformed: { dispose() })
                                }
                            }
                        }
    }
}

def addonBaseDir = System.getProperty("user.home") + "/Documents/Elder Scrolls Online/liveeu/AddOns/"
def sourceDir = "src/"
def addonDir = addonBaseDir + "AwesomeGuildStore"

task getVersion {
    if(!project.hasProperty("targetVersion")) {
        createConfigDialog()
        if(!project.hasProperty("targetVersion")) {
            throw new GradleException('build stopped by user')
        }
    }
}

task deleteAddonFolder << { delete addonDir }

task copyToAddonFolder(type: Copy) {
    mustRunAfter deleteAddonFolder
    from(sourceDir) {
        exclude "AwesomeGuildStore.txt"
        exclude "Settings.lua"
    }
    into addonDir
}

task copyFilesWithTokens(type: Copy) {
    mustRunAfter copyToAddonFolder
    from(sourceDir) {
        include "AwesomeGuildStore.txt"
        include "Settings.lua"
        filter(ReplaceTokens, tokens: [
            "VERSION_NUMBER": project.targetVersion,
        ])
    }
    into addonDir
    outputs.upToDateWhen { false }
}

task buildForDevelopment() {
    dependsOn copyToAddonFolder
    dependsOn copyFilesWithTokens
}

task createArchive(type: Zip) {
    dependsOn getVersion
    dependsOn deleteAddonFolder
    dependsOn copyToAddonFolder
    dependsOn copyFilesWithTokens
    def targetVersion = project.targetVersion
    println "build archive with version " + targetVersion
    from addonDir
    include "**/*"
    into "AwesomeGuildStore"
    destinationDir file("target")
    archiveName "AwesomeGuildStorev" + targetVersion.replaceAll(/\./, "_") + ".zip"
}